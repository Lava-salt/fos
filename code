# head (module importing)

from os import system, getcwd
from sys import platform
from subprocess import run
from random import randint
from codecs import encode

# head (other variables' defining)

global pointer
pointer = 0
def goto(n):
    global pointer
    pointer = n
code = []
def bf(code, input_data):
    memory = []
    for i in range(256):
        memory.append(0)
    pointer = 0
    code_pointer = 0
    input_pointer = 0
    output = []
    loop_stack = []
    stack = []
    while code_pointer < len(code):
        command = code[code_pointer]
        if command == '>':
            pointer += 1
        elif command == '<':
            pointer -= 1
        elif command == '+':
            memory[pointer] = (memory[pointer] + 1) % 256
        elif command == '-':
            memory[pointer] = (memory[pointer] - 1) % 256
        elif command == '.':
            output.append(chr(memory[pointer]))
        elif command == ',':
            if input_pointer < len(input_data):
                memory[pointer] = ord(input_data[input_pointer])
                input_pointer += 1
            else:
                memory[pointer] = 0
        elif command == ';':
            output.append(memory[pointer])
        elif command == '#':
            memory[pointer] = 0
        elif command == '@':
            if pointer < len(memory) - 1:
                memory[pointer + 1] = memory[pointer]
        elif command == '&':
            if pointer > 0:
                memory[pointer], memory[pointer - 1] = memory[pointer - 1], memory[pointer]
        elif command == '%':
            memory[pointer] = (memory[pointer] * 2) % 256
        elif command == '$':
            memory[pointer] = memory[pointer] // 2
        elif command == '^':
            while pointer > 0 and memory[pointer] == 0:
                pointer -= 1
        elif command == '~':
            while pointer < len(memory) - 1 and memory[pointer] != 0:
                pointer += 1
        elif command == '(':
            stack.append(memory[pointer])
        elif command == ')':
            if stack:
                memory[pointer] = stack.pop()
        elif command == '[':
            if memory[pointer] == 0:
                open_loops = 1
                while open_loops > 0:
                    code_pointer += 1
                    if code[code_pointer] == '[':
                        open_loops += 1
                    elif code[code_pointer] == ']':
                        open_loops -= 1
        elif command == ']':
            if memory[pointer] != 0:
                close_loops = 1
                while close_loops > 0:
                    code_pointer -= 1
                    if code[code_pointer] == ']':
                        close_loops += 1
                    elif code[code_pointer] == '[':
                        close_loops -= 1
        code_pointer += 1
    for i in output:
        print(i, end="")
def shell():
    print(f'Python 3.8.5 (default, Jul 20 2020, 23:11:29) [GCC 9.3.0] on {platform}\nType "help", "copyright", "credits" or "license" for more information.')
def hq(y):
    list = []
    for i in range(len(y)):
        list.append(y[i])
    num = 0
    list1 = 0
    stack = []
    for x in list:
        if x == "C":
            print(input())
        elif x == "H":
            print("Hello, World!")
        elif x == "I":
            hq(input())
        elif x == "Q":
            print(y)
        elif x == "R":
            print(encode(input(), "rot_13"))
        elif x == "S":
            l1 = []
            for i in range(randint(1, 10)):
                l1.append(input())
            l1.sort()
            print(l1)
        elif x == "9":
            for i in range(99, 0, -1):
                print(f"{i} bottles of beer on the wall!")
                print(f"{i} bottles of beer!")
                print("Take one down, pass it around")
                print(f"{i - 1} bottles of beer on the wall!")
        elif x == "+":
            num += 1
        elif x == "-":
            try:
                if list[list1 - 1] == "F":
                    print(None.split(" "))
                else:
                    num -= 1
            except IndexError:
                num -= 1
        elif x == "*":
            num *= 2
        elif x == "/":
            num /= 3
        elif x == "%":
            num %= 2
        elif x == "x":
            num **= 2
        elif x == "X":
            num **= 3
        elif x == "&":
            num //= 3
        elif x == "A":
            print(num)
        elif x == "F":
            for i in range(101):
                if i % 3 == 0 and i % 5 == 0:
                    print(f"FizzBuzz ({i})")
                elif i % 3 == 0:
                    print(f"Fizz ({i})")
                elif i % 5 == 0:
                    print(f"Buzz ({i})")
                else:
                    print(i)
        elif x == "$":
            stack.append(num)
        elif x == "#":
            p = stack[-1]
            del stack[-1]
            print(p, end = "")
        elif x == "^":
            p = stack[-1]
            del stack[-1]
            print(chr(p), end = "")
        elif x == "=":
            print()
        elif x == "/":
            num = int(input())
        elif x == "\\":
            num = ord(input())
        elif x == "P":
            stack.append(input())
        elif x == ">":
            p = stack[-1]
            del stack[-1]
            exec(p)
        elif x == "<":
            p = stack[-1]
            del stack[-1]
            print(eval(p))
        elif x == "½":
            p = stack[-1]
            del stack[-1]
            system(p)
        elif x == "@":
            hq(y[list1 + 1 : len(y)])
        elif x == "€":
            for i in range(2):
                hq(y[list1 + 1 : len(y)])
        elif x == "é":
            while True:
                hq(y[list1 + 1 : len(y)])
        elif x == "0":
            num = bin(num)
        elif x == "2":
            t = [2, 3]
            for i in t:
                for j in t:
                    print(f"{i} x {j} = {i * j}")
            for i in t:
                for j in t:
                    for k in t:
                        print(f"{i} x {j} x {k} = {i * j * k}")
            for i in t:
                for j in t:
                    for k in t:
                        for l in t:
                            print(f"{i} x {j} x {k} x {l} = {i * j * k * l}")
            for i in t:
                for j in t:
                    for k in t:
                        for l in t:
                            for m in t:
                                print(f"{i} x {j} x {k} x {l} x {m} = {i * j * k * l * m}")
        elif x == "G":
            print("Hello World, I'm Gay!")
        elif x == ":":
            stack.append(chr(num))
        elif x == ";":
            stack[-1] = stack[-1] + chr(num)
    list1 += 1

# body (code)

print("1 to run Python code")
print("2 to run Batch code")
print("3 to run +-<>.,[] code")
print("4 to run any code")
print("5 to open documentation shell")
print("6 to open esoteric programming languages")
x = int(input("\n"))
if x == 1:
    print("1 to execute Python code")
    print("2 to evaluate Python code")
    print("3 to open general shell")
    x = int(input("\n"))
    if x == 1:
        print("1 to run enhanced version")
        print("2 to execute single-line commands")
        print("3 to execute from files")
        print("4 to open debugger")
        x = int(input("\n"))
        if x == 1:
            print("1 to get information")
            print("2 to really execute")
            print("3 to execute from files")
            x = int(input("\n"))
            if x == 1:
                print("You can run enhanced Python programs, like running AppleSoft BASIC in Apple ][. ")
                print("Write normal syntax, but start with a number that's the line number of the code line. ")
                print("For example, like \"10 print('executed on line 10')\". There's also some extra functions. ")
                print("\"goto(int)\" is used for making the executing line change to the given integer. ")
                print("For example, \"10 x = 0 20 print(x) 30 x += 1 40 goto 2\" code counts forever. ")
                print("\"listcode\" command lists the entire code, and \"run\" runs the code in the lines from smallest to biggest. ")
                print("Use the \"bf(code, input_data)\" function to execute +-<>.,[] code. ")
                print("Use the \"hq(code)\" function to execute HQ9+ code (but with 31 commands!)")
                print("Use \"new\" syntax to clean your code.")
                print("You can have a save code for your code and load it with \"save\" and \"load\" keywords. ")
                print("You can execute files. For example, writing \"python3 file.txt\" will execute \"file.txt\" in Python 3.")
                print("You can also do other things like \"python3 -c print(\"hi\")\" to print \"hi\".")
                print("DO NOT use the \"kur\", \"gawk\", \"code\" and \"pointer\" as variables, lists, tuples, dicts e.t.c. as this could break the code. ")
                print("Sorry but these are highly necessary for the code to run. ")
                input("Example program: ")
                print("10 print('Number Sum Finder')")
                print("20 x = input('Number 1: ')")
                print("30 y = input('Number 2: ')")
                print("31 x = int(x)")
                print("32 y = int(y)")
                print("40 print(f'The sum of {x} and {y} is {x+y}')")
                print("45 z = 0")
                print("50 z = input('Want to do it again? (y/n)')")
                print("60 goto(0) if 'y' in z.lower()")
                print("# now i'll list the project code for debug:")
                print("listcode")
                input("run ")
            elif x == 2:
                shell()
                del x
                while True:
                    kur = []
                    for i in code:
                        kur.append(i)
                    for i in range(len(kur)):
                        tul = kur[i]
                        pul = tul.split()
                        kur[i] = int(pul[0])
                    code.append(input("> "))
                    pul = code[-1].split()
                    if pul[0].isnumeric():
                        try:
                            del pul
                        except NameError:
                            print("", end = "")
                        try:
                            del tul
                        except NameError:
                            print("", end = "")
                        print("", end = "")
                    else:
                        try:
                            del pul
                        except NameError:
                            print("", end = "")
                        try:
                            del tul
                        except NameError:
                            print("", end = "")
                        if code[-1] == "run":
                            del code[-1]
                            pointer = 0
                            pagot = int(input("Run how many lines? "))
                            shell()
                            while pointer < pagot:
                                pointer += 1
                                for i in code:
                                    gawk = i.split()
                                    del gawk[0]
                                    gawk = " ".join(gawk)
                                    if eval(i.split()[0]) == pointer:
                                        try:
                                            exec(gawk)
                                        except Exception as e:
                                            if e != None:
                                                print(e)
                        elif code[-1] == "listcode":
                            del code[-1]
                            for i in code:
                                print(i)
                        elif code[-1] == "save":
                            del code[-1]
                            print(code)
                        elif code[-1] == "load":
                            del code[-1]
                            code = eval(input("Save code >>> "))
                        elif code[-1] == "new":
                            del code[-1]
                            code = []
                        else:
                            try:
                                run(code[-1].split(" "))
                            except Exception:
                                try:
                                    exec(code[-1])
                                except Exception as e:
                                    if e != None:
                                        print(e)
                            del code[-1]
            elif x == 3:
                print("Please go to the \"really execute\" option and get a save code of your project.")
                x = input("And copy it, then paste it to a file. Are you ready? (y/n) ")
                if "y" in x.lower():
                    del x
                    kur = []
                    for i in code:
                        kur.append(i)
                    for i in range(len(kur)):
                        tul = kur[i]
                        pul = tul.split()
                        kur[i] = int(pul[0])
                    code.append("load")
                    pul = code[-1].split()
                    if pul[0].isnumeric():
                        try:
                            del pul
                        except NameError:
                            print("", end="")
                        try:
                            del tul
                        except NameError:
                            print("", end="")
                        print("", end="")
                    else:
                        try:
                            del pul
                        except NameError:
                            print("", end="")
                        try:
                            del tul
                        except NameError:
                            print("", end="")
                        if code[-1] == "run":
                            del code[-1]
                            pointer = 0
                            pagot = int(input("Run how many lines? "))
                            shell()
                            while pointer < pagot:
                                pointer += 1
                                for i in code:
                                    gawk = i.split()
                                    del gawk[0]
                                    gawk = " ".join(gawk)
                                    if eval(i.split()[0]) == pointer:
                                        try:
                                            exec(gawk)
                                        except Exception as e:
                                            if e != None:
                                                print(e)
                        elif code[-1] == "listcode":
                            del code[-1]
                            for i in code:
                                print(i)
                        elif code[-1] == "save":
                            del code[-1]
                            print(code)
                        elif code[-1] == "load":
                            del code[-1]
                            f = open(input("Save code's file >>> "), "r")
                            p = f.read()
                            code = eval(p)
                            f.close()
                        elif code[-1] == "new":
                            del code[-1]
                            code = []
                        else:
                            try:
                                exec(code[-1])
                            except Exception as e:
                                if e != None:
                                    print(e)
                            del code[-1]
                    del f, p
                    kur = []
                    for i in code:
                        kur.append(i)
                    for i in range(len(kur)):
                        tul = kur[i]
                        pul = tul.split()
                        kur[i] = int(pul[0])
                    code.append("run")
                    pul = code[-1].split()
                    if pul[0].isnumeric():
                        try:
                            del pul
                        except NameError:
                            print("", end="")
                        try:
                            del tul
                        except NameError:
                            print("", end="")
                        print("", end="")
                    else:
                        try:
                            del pul
                        except NameError:
                            print("", end="")
                        try:
                            del tul
                        except NameError:
                            print("", end="")
                        if code[-1] == "run":
                            del code[-1]
                            pointer = 0
                            pagot = int(input("Run how many lines? "))
                            shell()
                            while pointer < pagot:
                                pointer += 1
                                for i in code:
                                    gawk = i.split()
                                    del gawk[0]
                                    gawk = " ".join(gawk)
                                    if eval(i.split()[0]) == pointer:
                                        try:
                                            exec(gawk)
                                        except Exception as e:
                                            if e != None:
                                                print(e)
                        elif code[-1] == "listcode":
                            del code[-1]
                            for i in code:
                                print(i)
                        elif code[-1] == "save":
                            del code[-1]
                            print(code)
                        elif code[-1] == "load":
                            del code[-1]
                            code = eval(input("Save code >>> "))
                        elif code[-1] == "new":
                            del code[-1]
                            code = []
                        else:
                            try:
                                exec(code[-1])
                            except Exception as e:
                                if e != None:
                                    print(e)
                            del code[-1]
        elif x == 2:
            print("1 to execute normally")
            print("2 to execute coolly")
            x = int(input("\n"))
            if x == 1:
                del x, code, pointer
                shell()
                while True:
                    try:
                        exec(input(">>> "))
                    except Exception as e:
                        if e != None:
                            print(e)
            elif x == 2:
                del x, code, pointer
                print(getcwd)
                print(f"--mode=client --host={randint(100, 999)}.{randint(0, 9)}.{randint(0, 9)}.{randint(0, 9)} --port={randint(10000, 99999)}")
                print("import sys; print('Python %s on %s' % (sys.version, sys.platform))")
                print(f"sys.path.extend(['{getcwd}'])")
                print("PyDev console: starting.")
                print(f"Python 3.8.5 (tags/v3.8.5, Jul 20 2020, 23:11:29) [MSC v.1941 64 bit (AMD64)] on {platform}")
                shell()
                while True:
                    try:
                        exec(input(">>> "))
                    except Exception as e:
                        if e != None:
                            print(e)
        elif x == 3:
            del x, code, pointer
            f = open(input("File name: "), "r")
            try:
                exec(f.read())
            except Exception as e:
                if e != None:
                    print(e)
            f.close()
        elif x == 4:
            del code, pointer
            print("1 to debug manually")
            print("2 to debug from files")
            x = int(input("\n"))
            if x == 1:
                print("1 to debug 1 line of code")
                print("2 to debug multiple lines")
                x = int(input("\n"))
                if x == 1:
                    x = input("Enter Python code.\n")
                    try:
                        exec(x)
                        print("Code execution successful: Return code 0")
                    except Exception as e:
                        print("Code execution failed: Return code 1")
                        print("Exception (error) type: ")
                        print(e)
                elif x == 2:
                    x = input("Enter Python code's file.\n")
                    f = open(x, "r")
                    x = f.read()
                    f.close()
                    try:
                        exec(x)
                        print("Code execution successful: Return code 0")
                    except Exception as e:
                        print("Code execution failed: Return code 1")
                        print("Exception (error) type: ")
                        print(e)
            elif x == 2:
                print("1 to debug 1 line of code")
                print("2 to debug multiple lines")
                x = int(input("\n"))
                if x == 1:
                    x = input("Enter Python codes as a Python list.\n")
                    x = eval(x)
                    try:
                        for i in x:
                            exec(i)
                        print("Code execution successful: Exit code 0")
                    except Exception as e:
                        print("Code execution failed: Exit code 1")
                        print("Exception (error) type: ")
                        print(e)
                elif x == 2:
                    x = input("Enter Python codes as a Python list's file.\n")
                    f = open(x, "r")
                    x = eval(f.read())
                    f.close()
                    try:
                        for i in x:
                            exec(i)
                        print("Code execution successful: Exit code 0")
                    except Exception as e:
                        print("Code execution failed: Exit code 1")
                        print("Exception (error) type: ")
                        print(e)
    elif x == 2:
        print("1 to evaluate single-line commands")
        print("2 to evaluate from files")
        x = int(input("\n"))
        if x == 1:
            del x, code, pointer
            shell()
            while True:
                try:
                    print(eval(input(">>> ")))
                except Exception as e:
                    if e != None:
                        print(e)
        elif x == 2:
            del x, code, pointer
            f = open(input("File name: "), "r")
            try:
                print(eval(f.read()))
            except Exception as e:
                if e != None:
                    print(e)
            f.close()
    elif x == 3:
        help()
        while True:
            xxxxxyyyyyzzzzz = input(">>> ")
            if xxxxxyyyyyzzzzz == "" or xxxxxyyyyyzzzzz == "fos":
                break
            elif xxxxxyyyyyzzzzz == "readme":
                f = open("readme.txt", "r")
                print(f.read())
                f.close()
            else:
                try:
                    run(xxxxxyyyyyzzzzz.split(" "))
                except Exception:
                    try:
                        print(eval(xxxxxyyyyyzzzzz))
                    except Exception:
                        try:
                            exec(xxxxxyyyyyzzzzz)
                        except Exception as e:
                            system(xxxxxyyyyyzzzzz)
elif x == 2:
    print("1 to run enhanced version")
    print("2 to execute single-line commands")
    print("3 to execute from files")
    x = int(input("\n"))
    if x == 1:
        print("1 to really execute")
        print("2 to execute from files")
        x = int(input("\n"))
        if x == 1:
            print("You can run enhanced Batch programs, like running AppleSoft BASIC in Apple ][. ")
            print("Write normal syntax, but start with a number that's the line number of the code line. ")
            print("For example, like \"10 echo \"executed on line 10\"\". There's also some extra functions. ")
            print("\"listcode\" command lists the entire code, and \"run\" runs the code in the lines from smallest to biggest. ")
            print("You can have a save code for your code and load it with \"save\" and \"load\" keywords. ")
            print("Use \"new\" syntax to clean your code.")
            print("You can have a save code for your code and load it with \"save\" and \"load\" keywords. ")
            print("You can execute files. For example, writing \"python3 file.txt\" will execute \"file.txt\" in Python 3.")
            print("You can also do other things like \"python3 -c print(\"hi\")\" to print \"hi\".")
            print("DO NOT use the \"kur\", \"gawk\", \"code\" and \"pointer\" as variables, lists, tuples, dicts e.t.c. as this could break the code. ")
            input("Sorry but these are highly necessary for the code to run. ")
            shell()
            del x
            while True:
                kur = []
                for i in code:
                    kur.append(i)
                for i in range(len(kur)):
                    tul = kur[i]
                    pul = tul.split()
                    kur[i] = int(pul[0])
                code.append(input("$ "))
                pul = code[-1].split()
                if pul[0].isnumeric():
                    try:
                        del pul
                    except NameError:
                        print("", end="")
                    try:
                        del tul
                    except NameError:
                        print("", end="")
                    print("", end="")
                else:
                    try:
                        del pul
                    except NameError:
                        print("", end="")
                    try:
                        del tul
                    except NameError:
                        print("", end="")
                    if code[-1] == "run":
                        del code[-1]
                        pointer = 0
                        pagot = int(input("Run how many lines? "))
                        shell()
                        while pointer < pagot:
                            pointer += 1
                            for i in code:
                                gawk = i.split()
                                del gawk[0]
                                gawk = " ".join(gawk)
                                if eval(i.split()[0]) == pointer:
                                    try:
                                        system(gawk)
                                    except Exception as e:
                                        if e != None:
                                            print(e)
                    elif code[-1] == "listcode":
                        del code[-1]
                        for i in code:
                            print(i)
                    elif code[-1] == "save":
                        del code[-1]
                        print(code)
                    elif code[-1] == "load":
                        del code[-1]
                        code = eval(input("Save code >>> "))
                    elif code[-1] == "new":
                        del code[-1]
                        code = []
                    else:
                        try:
                            run(code[-1].split(" "))
                        except Exception:
                            try:
                                system(code[-1])
                            except Exception as e:
                                if e != None:
                                    print(e)
                        del code[-1]
        elif x == 2:
            print("Please go to the \"really execute\" option and get a save code of your project.")
            x = input("And copy it, then paste it to a file. Are you ready? (y/n) ")
            if "y" in x.lower():
                del x
                kur = []
                for i in code:
                    kur.append(i)
                for i in range(len(kur)):
                    tul = kur[i]
                    pul = tul.split()
                    kur[i] = int(pul[0])
                code.append("load")
                pul = code[-1].split()
                if pul[0].isnumeric():
                    try:
                        del pul
                    except NameError:
                        print("", end="")
                    try:
                        del tul
                    except NameError:
                        print("", end="")
                    print("", end="")
                else:
                    try:
                        del pul
                    except NameError:
                        print("", end="")
                    try:
                        del tul
                    except NameError:
                        print("", end="")
                    if code[-1] == "run":
                        del code[-1]
                        pointer = 0
                        pagot = int(input("Run how many lines? "))
                        shell()
                        while pointer < pagot:
                            pointer += 1
                            for i in code:
                                gawk = i.split()
                                del gawk[0]
                                gawk = " ".join(gawk)
                                if eval(i.split()[0]) == pointer:
                                    try:
                                        system(gawk)
                                    except Exception as e:
                                        if e != None:
                                            print(e)
                    elif code[-1] == "listcode":
                        del code[-1]
                        for i in code:
                            print(i)
                    elif code[-1] == "save":
                        del code[-1]
                        print(code)
                    elif code[-1] == "load":
                        del code[-1]
                        f = open(input("Save code's file >>> "), "r")
                        p = f.read()
                        code = eval(p)
                        f.close()
                    elif code[-1] == "new":
                        del code[-1]
                        code = []
                    else:
                        try:
                            run(code[-1].split(" "))
                        except Exception:
                            try:
                                system(code[-1])
                            except Exception as e:
                                if e != None:
                                    print(e)
                        del code[-1]
                del f, p
                kur = []
                for i in code:
                    kur.append(i)
                for i in range(len(kur)):
                    tul = kur[i]
                    pul = tul.split()
                    kur[i] = int(pul[0])
                code.append("run")
                pul = code[-1].split()
                if pul[0].isnumeric():
                    try:
                        del pul
                    except NameError:
                        print("", end="")
                    try:
                        del tul
                    except NameError:
                        print("", end="")
                    print("", end="")
                else:
                    try:
                        del pul
                    except NameError:
                        print("", end="")
                    try:
                        del tul
                    except NameError:
                        print("", end="")
                    if code[-1] == "run":
                        del code[-1]
                        pointer = 0
                        pagot = int(input("Run how many lines? "))
                        shell()
                        while pointer < pagot:
                            pointer += 1
                            for i in code:
                                gawk = i.split()
                                del gawk[0]
                                gawk = " ".join(gawk)
                                if eval(i.split()[0]) == pointer:
                                    try:
                                        system(gawk)
                                    except Exception as e:
                                        if e != None:
                                            print(e)
                    elif code[-1] == "listcode":
                        del code[-1]
                        for i in code:
                            print(i)
                    elif code[-1] == "save":
                        del code[-1]
                        print(code)
                    elif code[-1] == "load":
                        del code[-1]
                        code = eval(input("Save code >>> "))
                    elif code[-1] == "new":
                        del code[-1]
                        code = []
                    else:
                        try:
                            run(code[-1].split(" "))
                        except Exception:
                            try:
                                system(code[-1])
                            except Exception as e:
                                if e != None:
                                    print(e)
                        del code[-1]
    elif x == 2:
        print("1 to execute normally")
        print("2 to execute coolly")
        x = int(input("\n"))
        if x == 1:
            del x, code, pointer
            shell()
            while True:
                try:
                    system(input("$ "))
                except Exception as e:
                    if e != None:
                        print(e)
        elif x == 2:
            del x, code, pointer
            print("Windows PowerShell")
            print("Copyright (C) Microsoft Corporation. All rights reserved.\n")
            print("Install the latest PowerShell for new features and improvements! https://aka.ms/PSWindows\n")
            while True:
                try:
                    system(input(f"(.venv) PS {getcwd}> "))
                except Exception as e:
                    if e != None:
                        print(e)
    elif x == 3:
        del x, code, pointer
        f = open(input("File name: "), "r")
        system(f.read())
        f.close()
elif x == 3:
    print("1 to run enhanced version")
    print("2 to execute single-line commands")
    print("3 to execute from files")
    x = int(input("\n"))
    if x == 1:
        print("You can run enhanced +-<>.,[] programs, like running AppleSoft BASIC in Apple ][. ")
        print("Write normal syntax, but start with a number that's the line number of the code line. ")
        print("For example, likenThere's also some extra functions. ")
        print("\"listcode\" command lists the entire code, and \"run\" runs the code in the lines from smallest to biggest. ")
        input("You can have a save code for your code and load it with \"save\" and \"load\" keywords. ")
        print("Use \"new\" syntax to clean your code.")
        shell()
        del x
        while True:
            kur = []
            for i in code:
                kur.append(i)
            for i in range(len(kur)):
                tul = kur[i]
                pul = tul.split()
                kur[i] = int(pul[0])
            code.append(input("\n> "))
            pul = code[-1].split()
            if pul[0].isnumeric():
                try:
                    del pul
                except NameError:
                    print("", end="")
                try:
                    del tul
                except NameError:
                    print("", end="")
                print("", end="")
            else:
                try:
                    del pul
                except NameError:
                    print("", end="")
                try:
                    del tul
                except NameError:
                    print("", end="")
                if code[-1] == "run":
                    del code[-1]
                    pointer = 0
                    pagot = int(input("Run how many lines? "))
                    shell()
                    while pointer < pagot:
                        pointer += 1
                        for i in code:
                            gawk = i.split()
                            del gawk[0]
                            gawk = " ".join(gawk)
                            if eval(i.split()[0]) == pointer:
                                bf(gawk, input("Input data >>> "))
                elif code[-1] == "listcode":
                    del code[-1]
                    for i in code:
                        print(i)
                elif code[-1] == "save":
                    del code[-1]
                    print(code)
                elif code[-1] == "load":
                    del code[-1]
                    code = eval(input("Save code >>> "))
                elif code[-1] == "new":
                    del code[-1]
                    code = []
                else:
                    bf(code[-1], input("Input data >>> "))
                    del code[-1]
    elif x == 2:
        del x, code, pointer
        shell()
        while True:
            bf(input(">>> "), input("input data: "))
    elif x == 3:
        del x, code, pointer
        f = open(input("File name of code: "), "r")
        g = open(input("File name of input data: "), "r")
        bf(f.read(), g.read())
        f.close()
        g.close()
elif x == 4:
    del x, code, pointer
    print("First, enter the compiling language as a Python list.")
    print("E.g. write \"[\"perl\", \"-e\"]\" to run Perl code. ")
    print("BASH -> \"bash\"")
    print("ZSH -> \"zsh\"")
    print("Fish -> \"fish\"")
    print("PowerShell -> \"pwsh\", or \"powershell\"")
    print("Batch -> \"cmd\" ")
    print("Swift -> \"swift\" ")
    print("Python -> \"python\", \"python3\"")
    print("Ruby -> \"ruby\"")
    print("Perl -> \"perl\"")
    print("PHP -> \"php\"")
    print("Lua -> \"lua\"")
    print("Node.js (JavaScript) -> \"node\" ")
    print("Java -> \"java\", \"javac\"")
    print("Kotlin -> \"kotlin\", \"kotlinc\"")
    print("Scala -> \"scala\" ")
    print("C# (C++++) -> \"dotnet run\", \"mono\"")
    print("F# (F++++) -> \"dotnet fsi\" ")
    print("Assembly (NASM) -> \"nasm\"")
    print("COBOL -> \"cobc -x\"")
    print("R -> \"Rscript\" ")
    print("Lisp (Common Lisp) -> \"sbcl\", \"clisp\"")
    print("Scheme -> \"racket\"")
    print("Prolog -> \"swipl\" ")
    print("PostgreSQL -> \"psql\"")
    print("MySQL -> \"mysql\"")
    input("SQLite -> \"sqlite3\" ")
    print("Write the langs' list between \"quotation marks\", and all between [square braces] separated by, commas (like Python lists). ")
    print("E.g. write \"[\"perl\", \"-e\"]\" to make program write inline Perl -e code. ")
    print("Use \"[\"perl\", \"-c\"]\" this \"-c\" syntax to make the program run a code instead of a file. ")
    print("Then, give the file name to run, e.g. \"[\"python\", \"-c\", \"print('hello')\"]\"")
    input("So, basically text you need to enter to the \"subprocess.run()\" command. ")
    x = input("Get more information about subprocess.run() command? (y/n) ")
    if "y" in x.lower():
        help("subprocess.run")
    del x
    run(eval(input("Enter code: ")))
elif x == 5:
    print("1 to open Python shell")
    print("2 to open Batch shell")
    x = int(input("\n"))
    if x == 1:
        print("1 to open normal shell")
        print("2 to open cool shell")
        x = int(input("\n"))
        if x == 1:
            print("1 to open shell that doesn't recognize empty commands as unique syntax")
            print("2 to open shell with opposite of option 1")
            x = int(input("\n"))
            if x == 1:
                while True:
                    x = input(">>> ")
                    help(x)
            elif x == 2:
                while True:
                    x = input(">>> ")
                    if x == "":
                        help()
                    else:
                        help(x)
        elif x == 2:
            help()
    elif x == 2:
        while True:
            x = input(">>> ")
            system(f"help {x}")
elif x == 6:
    print("1 to open +-<>.,[]")
    print("2 to open HQ9+")
    x = int(input("\n"))
    if x == 1:
        print("+-<>.,[] Syntax for this IDE:")
        print("""
+ Increment the value of the current cell
- Decrement the value of the current cell
> Move pointer to the right
< Move pointer to the left
. Print the Unicode character of the current cell
, Take user input (store in the current cell)
[ Jump past matching } if the current cell is 0
] Jump back to matching { if the current cell is not 0
; Print the raw value of the current cell (instead of Unicode)
# Set the current cell to zero
@ Duplicate the value of the current cell to the next cell
& Swap the current cell with the previous cell
% Multiply the current cell by 2
$ Divide the current cell by 2 (integer division)
^ Move the pointer to the first nonzero cell
~ Move the pointer to the last nonzero cell
( Push the current cell’s value onto a stack
) Pop the last value from the stack into the current cell
        """)
        while True:
            x = input("code >>>     ")
            y = input("input data > ")
            bf(x, y)
    elif x == 2:
        print("HQ9+ Syntax for this IDE:")
        print(r"""
C Copies input to output.
H Prints "Hello, world!"
I Interprets input as program source.
Q Prints the program source code.
R Encrypts input with ROT-13.
S Sorts input lines randomly given from 1 to 10.
9 Prints the lyrics to "99 Bottles of Beer on the Wall."
+ Increments the accumulator.
- Decrements the accumulator.
* Doubles the accumulator.
/ Divides the accumulator by 3.
% Modulos the accumulator by n%2.
x Redefines the accumulator to its square.
X Redefines the accumulator to its cube.
& The / operation but int instead of float
A Print the accumulator
F Prints FizzBuzz up to 100.
- Deferences a null pointer if preceded by an F.
$ Push the accumulator to the stack
# Pop a value from the stack and print it
^ Pop a value from the stack and print its ASCII value
= Print new line (\n in C++)
/ Get input from user and turn accumulator to it
P Get input from user and push string to stack
> Pop a value from the stack execute it in Python
< Pop a value from the stack evaluate it in Python
½ Pop a value from the stack and execute it in Batch
\ Get input from user and turn accumulator to its Unicode value
@ Repeat code after this 2 times.
€ Repeat code after this 3 times.
é Repeat code after this infinitely.
0 Turns accumulator to binary
2 Prints 2 and 3 timetable (used for looping and multiplying/dividing in HQ9+)
G LGBTQ+ approved HQ9+ H
: Push accumulator's Unicode value to stack
; Append accumulator's Unicode value to stack's top value
        """)
        while True:
            x = input(">>> ")
            hq(x)
"""
language list:
english
sanskrit
basque
tagalog
classical nahuatl
georgian
kwakiutl
volapuk
latin
"""
