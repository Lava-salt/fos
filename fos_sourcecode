# head (module importing that is necessary to define functions for module)

from time import sleep
from random import randint, shuffle
from sys import platform

# body (function defining for module)

def operation(string):
    x = float(input("Number 1: "))
    y = float(input("Number 2: "))
    z = eval(f"x {string} y")
    if int(z) == z:
        z = int(z)
    print(f"Operation Result:\n{z}")
def sqrt():
    x = float(input("Number 1: "))
    y = float(input("Number 2: "))
    z = eval(f"x ** (1 / y)")
    if int(z) == z:
        z = int(z)
    print(f"Operation Result:\n{z}")
def edit(str, edit):
    txt = str
    return eval(f"{txt}.{edit}()")
def get(xox):
    print(xox[0], xox[1], xox[2])
    print(xox[3], xox[4], xox[5])
    print(xox[6], xox[7], xox[8])
def o(xox):
    print("O to move")
    x = int(input("Where to place o? (1/9) "))
    if xox[x - 1] != "A":
        print("Invalid position")
        o(xox)
    else:
        xox[x - 1] = "O"
def xx(xox):
    print("X to move")
    x = int(input("Where to place x? (1/9) "))
    if xox[x - 1] != "A":
        print("Invalid position")
        xx(xox)
    else:
        xox[x - 1] = "X"
def ai(xox):
    print("O (computer) to move")
    x = randint(1, 9)
    if xox[x - 1] != "A":
        aipatch(xox)
    else:
        xox[x - 1] = "O"
def aipatch(xox):
    x = randint(1, 9)
    if xox[x - 1] != "A":
        aipatch(xox)
    else:
        xox[x - 1] = "O"
def scramble(x):
    list = []
    for i in range(len(x)):
        list.append(x[i])
    shuffle(list)
    y = ""
    for i in list:
        y = f"{y}{i}"
    return y
abc = ["A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N",
            "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z"]
xyz = ["+", "-", "*", "/", "%", "**", "//"]
class Life:
    def __init__(self, number, t, x, emoji):
        self.list = ["游릱", "游릴"]
        self.t = t
        self.x = x
        self.number = number
        self.grid = [" "]
        self.emoji = emoji
        for i in range(self.number + 2):
            self.grid.append(randint(0, 1))
        self.grid.append(" ")
        self.loop()
    def underpopulation(self):
        for i in range(len(self.grid)):
            if not(self.grid[i] == " "):
                if self.grid[i] == 1 and self.grid[i - 1] == 0 and self.grid[i + 1] == 0:
                    self.grid[i] = 0
                    print(f"Cell {i + 1} underpopulated")
                    print("Grid: (0/游릱 = Dead cell, 1/游릴 = Alive cell)")
                    if self.emoji:
                        for i in self.grid:
                            if i == 0:
                                print("游릱", end="")
                            elif i == 1:
                                print("游릴", end="")
                        print("")
                    else:
                        for i in self.grid:
                            print(i, end="")
                        print("")
                    sleep(self.t)
    def overpopulation(self):
        for i in range(len(self.grid)):
            if not(self.grid[i] == " "):
                if self.grid[i] == 1 and self.grid[i - 1] == 1 and self.grid[i + 1] == 1:
                    self.grid[i] = 0
                    print(f"Cell {i + 1} overpopulated")
                    print("Grid: (0/游릱 = Dead cell, 1/游릴 = Alive cell)")
                    if self.emoji:
                        for i in self.grid:
                            if i == 0:
                                print("游릱", end="")
                            elif i == 1:
                                print("游릴", end="")
                        print("")
                    else:
                        for i in self.grid:
                            print(i, end="")
                        print("")
                    sleep(self.t)
    def reproduction(self):
        for i in range(len(self.grid)):
            if not(self.grid[i] == " "):
                if self.grid[i] == 0 and self.grid[i - 1] == 1 and self.grid[i + 1] == 1:
                    self.grid[i] = 1
                    print(f"Cell {i + 1} reproduced")
                    print("Grid: (0/游릱 = Dead cell, 1/游릴 = Alive cell)")
                    if self.emoji:
                        for i in self.grid:
                            if i == 0:
                                print("游릱", end="")
                            elif i == 1:
                                print("游릴", end="")
                        print("")
                    else:
                        for i in self.grid:
                            print(i, end="")
                        print("")
                    sleep(self.t)
    def loop(self):
        while 1 in self.grid:
            print(f"\n\n\n\n\n\nGENERATION {self.x}")
            print("Grid: (0/游릱 = Dead cell, 1/游릴 = Alive cell)")
            if self.emoji:
                for i in self.grid:
                    if i == 0:
                        print("游릱", end = "")
                    elif i == 1:
                        print("游릴", end = "")
                print("")
            else:
                for i in self.grid:
                    print(i, end="")
                print("")
            self.underpopulation()
            self.overpopulation()
            self.reproduction()
            sleep(self.t)
            self.x += 1
            print("\n\n\n\n")
def shell():
    print(f'Python 3.8.5 (default, Jul 20 2020, 23:11:29) [GCC 9.3.0] on {platform}\nType "help", "copyright", "credits" or "license" for more information.')
